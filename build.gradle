plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.node-gradle.node' version '3.5.1' // Node.js plugin
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Additional repositories (if required) can be added here.
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	implementation 'com.google.code.gson:gson:2.8.9'
}

node {
	version = '22.12.0' // Matches the version of Node.js being used
	npmVersion = '9.8.1' // Confirm if npm version aligns with Node.js 22.x
	download = true // Ensure Node.js is downloaded locally
	workDir = file("${project.projectDir}/run/bin") // Directory for Node.js binaries
	nodeModulesDir = file("${project.projectDir}/run/bin") // Directory for node_modules
}


processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar() // Generate sources jar for easier development
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

// Ensure Node.js binaries exist
tasks.register("validateNodeFiles") {
	doLast {
		def requiredFiles = ["node.exe", "npm.cmd"] // Node.js and npm binaries
		def binDir = file("${project.projectDir}/src/main/resources/bin")
		requiredFiles.each { fileName ->
			if (!new File(binDir, fileName).exists()) {
				throw new GradleException("Required file '${fileName}' is missing in 'src/main/resources/bin'.")
			}
		}
	}
}

// Ensure Node.js setup runs before the build task
tasks.named("build").configure {
	dependsOn("nodeSetup", "validateNodeFiles")
}

// Clean up Node.js binaries during project clean
tasks.named("clean").configure {
	doLast {
		delete file("${project.projectDir}/bin/nodejs")
	}
}

// Include the bin directory in the mod's JAR file
jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
	from("src/main/resources/bin") {
		into("bin") // Include bin folder inside the mod jar
	}
	from("src/main/resources/assets/framecontainer") {
		into("assets/framecontainer")
	}
}

// Configure maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
}
